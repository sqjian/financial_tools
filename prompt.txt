import customtkinter as ctk  
from tkinter import filedialog  
import pandas as pd  
import warnings  

warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")  

class ReconciliationApp(ctk.CTk):  
    def __init__(self):  
        super().__init__()  
        self.title("财务对账工具 v1.0")  
        self.geometry("800x600")  
        self.df = None  
        self.excel_file = None  
        
        # 界面布局  
        self.create_widgets()  
        
        # 绑定事件  
        self.btn_load.configure(command=self.load_file)  
        self.sheet_selector.configure(command=self.on_sheet_selected)  

    def create_widgets(self):  
        # 文件选择部分  
        self.file_frame = ctk.CTkFrame(self)  
        self.file_frame.pack(pady=10, padx=10, fill="x")  

        self.btn_load = ctk.CTkButton(  
            self.file_frame, text="加载Excel文件"  
        )  
        self.btn_load.pack(side="left", padx=5)  

        self.file_info_label = ctk.CTkLabel(self.file_frame, text="未选择文件")  
        self.file_info_label.pack(side="left", padx=10)  

        # 工作表选择部分  
        self.sheet_frame = ctk.CTkFrame(self)  
        self.sheet_frame.pack(pady=10, padx=10, fill="x")  
        
        self.sheet_label = ctk.CTkLabel(self.sheet_frame, text="选择工作表:")  
        self.sheet_label.pack(side="left", padx=5)  
        
        self.sheet_selector = ctk.CTkComboBox(  
            self.sheet_frame,  
            values=[],  
            state="disabled",  
            width=200  
        )  
        self.sheet_selector.pack(side="left", padx=5)  

        # 列选择部分  
        self.selection_frame = ctk.CTkFrame(self)  
        self.selection_frame.pack(pady=10, padx=10, fill="x")  

        self.column_a = ctk.CTkComboBox(  
            self.selection_frame, values=[], state="disabled", width=200  
        )  
        self.column_a.pack(side="left", padx=5)  

        self.column_b = ctk.CTkComboBox(  
            self.selection_frame, values=[], state="disabled", width=200  
        )  
        self.column_b.pack(side="left", padx=5)  

        self.btn_calculate = ctk.CTkButton(  
            self.selection_frame,  
            text="开始对账",  
            state="disabled",  
        )  
        self.btn_calculate.pack(side="left", padx=5)  

        # 结果显示  
        self.result_text = ctk.CTkTextbox(self, wrap="word")  
        self.result_text.pack(pady=10, padx=10, fill="both", expand=True)  

    def load_file(self):  
        file_path = filedialog.askopenfilename(  
            filetypes=[("Excel files", "*.xlsx *.xls")]  
        )  
        if file_path:  
            self.excel_file = pd.ExcelFile(file_path)  
            self.file_info_label.configure(text=f"已选择: {file_path}")  
            
            # 更新工作表选择下拉框  
            self.sheet_selector.configure(  
                values=self.excel_file.sheet_names,  
                state="normal"  
            )  
            self.sheet_selector.set(self.excel_file.sheet_names[0])  # 设置默认值  

    def on_sheet_selected(self, event=None):  
        selected_sheet = self.sheet_selector.get()  
        if selected_sheet:  
            # 读取选中的工作表  
            self.df = pd.read_excel(self.excel_file, sheet_name=selected_sheet)  
            
            # 更新列选择下拉框  
            columns = self.df.columns.tolist()  
            self.column_a.configure(values=columns, state="normal")  
            self.column_b.configure(values=columns, state="normal")  
            
            if len(columns) > 0:  
                self.column_a.set(columns[0])  # 设置默认值  
                self.column_b.set(columns[0] if len(columns) == 1 else columns[1])  
            
            self.enable_controls()  

    def enable_controls(self):  
        self.btn_calculate.configure(state="normal")  

if __name__ == "__main__":  
    ctk.set_appearance_mode("system")  
    ctk.set_default_color_theme("blue")  
    app = ReconciliationApp()  
    app.mainloop()  



=====
完成上面的程序，你可以使用的工具类有：

def get_excel_stats(file_path: str) -> Optional[Dict[str, Union[str, int, List[str]]]]:  
    """  
    分析Excel文件并返回其工作表信息。  

    Args:  
        file_path (str): Excel文件的完整路径，支持.xlsx或.xls格式  

    Returns:  
        Optional[Dict[str, Union[str, int, List[str]]]]: 返回包含Excel工作表信息的字典，如果发生错误则返回None  
            返回字典的结构：  
            {  
                "file_path": str,       # Excel文件路径  
                "sheet_count": int,     # 工作表数量  
                "sheet_names": List[str] # 工作表名称列表  
            }  

    Raises:  
        FileNotFoundError: 当指定的Excel文件不存在时  
        Exception: 当读取Excel文件时发生其他错误  

    Examples:  
        >>> result = load_excel_sheets("example.xlsx")  
        >>> if result:  
        >>>     print(f"工作表数量: {result['sheet_count']}")  
        >>>     print(f"工作表名称: {result['sheet_names']}")  
    """  

def get_excel_cols(file_path: str, sheet_name: str) -> List[str]:
    """
    分析Excel文件并返回其工作簿非空列的名称列表

    Args:
        file_path (str): Excel文件的完整路径，支持.xlsx或.xls格式
        sheet_name (str): Excel文件的工作簿名称

    Returns:
        columns (List[str]):工作簿内非空列的名称

    Raises:
        FileNotFoundError: 当指定的Excel文件不存在时
        Exception: 当读取Excel文件时发生其他错误
    """

def reconcile_accounts(file_path: str, col_a_name: str, col_b_name: str, sheet_name: int = 0) -> str:  
    """  
    对账单匹配函数,用于比对两列数据并找出匹配和未匹配项  
    
    Args:  
        file_path (str): Excel文件的路径  
        col_a_name (str): 第一列(A列)的列名  
        col_b_name (str): 第二列(B列)的列名  
        sheet_name (int, optional): Excel工作表索引,默认为0  
        
    Returns:  
        str: 包含匹配结果的字符串,包括:  
            - 文件读取状态  
            - 预处理信息  
            - 精确匹配明细  
            - 组合匹配明细  
            - 未匹配项明细  
            如遇错误则返回错误信息  
    """  